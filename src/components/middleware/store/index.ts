// Import necessary functions and types from Redux Toolkit
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { configureStore } from "@reduxjs/toolkit";
import { combineReducers } from "redux";

// Helper function to show toast messages
import { showToastMessage } from "../../utils/helpers";

// Define the shape of a contact object
export interface Contact {
  id: number;
  firstName: string;
  lastName: string;
  status: string;
}

// Define the state shape for the contacts slice
interface ContactState {
  items: Contact[];
}

// Initialize the state with an empty array of contacts
const initialState: ContactState = {
  items: [],
};

// Create a slice for managing contacts
const contactSlice: any = createSlice({
  name: "contacts",
  initialState,
  reducers: {
    // Reducer to add a new contact
    addContact: (state, action: PayloadAction<Contact>) => {
      state.items.push(action.payload);
      showToastMessage("Contact created.", "success");
    },
    // Reducer to remove a contact by ID
    removeContact: (state, action: PayloadAction<number>) => {
      state.items = state.items.filter((todo) => todo.id !== action.payload);
      showToastMessage("Contact deleted.", "error");
    },
    // Reducer to update a contact
    updateContact: (state, action: PayloadAction<Contact>) => {
      const index = state.items.findIndex(
        (item) => item.id === action.payload.id
      );
      if (index !== -1) {
        state.items[index] = action.payload;
        console.log(state.items[index]);
      }
      showToastMessage("Contact details updated.", "success");
    },
  },
});

// Export the actions generated by the slice
export const { addContact, removeContact, updateContact } =
  contactSlice.actions;

// Export the reducer for use in the store configuration
export default contactSlice.reducer;

// Combine all reducers into one root reducer
const rootReducer = combineReducers({
  contacts: contactSlice.reducer,
});

// Configure the Redux store with the combined reducers
export const store = configureStore({
  reducer: rootReducer,
  // Preload the store with some initial data
  preloadedState: {
    contacts: {
      items: [
        {
          id: 1,
          firstName: "Shantanu",
          lastName: "Vaidya",
          status: "Active",
        },
      ],
    },
  },
});
